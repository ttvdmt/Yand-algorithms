#include <vector>
#include <algorithm>
#include <iostream>
/*
Развлекательный телеканал транслирует шоу «Колесо Фортуны». 
В процессе игры участники шоу крутят большое колесо, разделенное на сектора. 
В каждом секторе этого колеса записано число. После того как колесо останавливается, специальная стрелка указывает на один из секторов. 
Число в этом секторе определяет выигрыш игрока.

Юный участник шоу заметил, что колесо в процессе вращения замедляется из-за того, что стрелка задевает за выступы на колесе, 
находящиеся между секторами. Если колесо вращается с угловой скоростью v градусов в секунду,
и стрелка, переходя из сектора X к следующему сектору, задевает за очередной выступ, 
то текущая угловая скорость движения колеса уменьшается на k градусов в секунду. 
При этом если v ≤ k, то колесо не может преодолеть препятствие и останавливается. Стрелка в этом случае будет указывать на сектор X.

Юный участник шоу собирается вращать колесо. Зная порядок секторов на колесе, 
он хочет заставить колесо вращаться с такой начальной скоростью, 
чтобы после остановки колеса стрелка указала на как можно большее число. 
Колесо можно вращать в любом направлении и придавать ему начальную угловую скорость от a до b градусов в секунду.

Требуется написать программу, которая по заданному расположению чисел в секторах, 
минимальной и максимальной начальной угловой скорости вращения колеса и величине замедления колеса при переходе через границу секторов 
вычисляет максимальный выигрыш.
*/
int search_right(int k, int min, int max, int n, std::vector<int>& fortune)
{
	int max_elem = 0;
	for (int i = min; i <= max; i++)
	{
		int place;
		if (i % k == 0)
			place = ((i - 1) / k) % n;
		else
			place = (i / k) % n;

		if (fortune[place] > max_elem)
			max_elem = fortune[place];
	}
	return max_elem;
}

int search_left(int k, int min, int max, int n, std::vector<int>& fortune)
{
	int max_elem = 0;
	for (int i = min; i <= max; i++)
	{
		int place;
		if (i % k == 0)
			place = ((i - 1) / k) % n;
		else
			place = (i / k) % n;

		if (fortune[n - 1 - place] > max_elem)
			max_elem = fortune[n - 1 - place];
	}
	return max_elem;
}

int main()
{
	int n;
	std::cin >> n;
	std::vector<int> fortune;

	for (int i = 0; i < n; i++)
	{
		int elem;
		fortune.push_back(elem);
	}
	int min, max, k;
	std::cin >> min >> max >> k;

	int max1 = search_right(k, min, max, n, fortune);
	int max2 = search_left(k, min, max, n, fortune);

	int max_elem = (max1 > max2 ? max1 : max2);
	std::cout << max_elem;
}